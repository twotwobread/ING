package example.object.ch5;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Ch5Application {

	public static void main(String[] args) {
		SpringApplication.run(Ch5Application.class, args);
	}

}

// OOP에 대한 가장 큰 오해는 애플리케이션이 클래스의 집합으로 구성된다는 것이다.
// 물론 클래스는 중요하고 개발자가 직접 만지고 실험하고 고쳐볼 수 있는 실젝적이고 구체적인 도구다. 하지만 도구일뿐이다.
// 클래스라는 구현 도구에 지나치게 집착하면 경직되고 유연하지 못한 설계에 이를 확률이 높아진다.
// 훌륭한 객체지향 코드를 얻기 위해선 클래스가 아닌 객체를 지향하자. -> 좀 더 정확히 협력 내에서 객체가 수행하는 책임에 초점을 맞추자. -> 여기서 중요한 건 챔임이 객체가 수신할 수 있는 메시지의 기반이 된다는 것.
// 객체지향 애플리케이션의 가장 중요한 재료는 메시지다. -> 클래스로 구성되지만 메시지로 정의됨.

// 협력과 메시지
//	- 클라이언트-서버 모델
//		- 협력은 어떤 객체가 다른 객체에게 무언가를 요청할 때 시작됨. -> 두 객체 사이의 협력 관계를 설명하기 위해 사용하는 전통적인 메타포는 클라이언트-서버 모델.
//		- 객체는 협력에 참여하는 동안 클라이언트와 서버의 역할을 동시에 수행하는 것이 일반적 -> 협력의 관점에서 객체는 수신하는 메시지의 집학과 외부 객체에게 전송하는 메시지의 집합으로 구성됨.
//	- 메시지와 메시지 전송
//		- 메시지는 객체들이 협력하기 위해 사용할 수 있는 유일한 의사소통 수단. -> 한 객체가 다른 객체에게 요청하는 것을 메시지 전송 or 메시지 패싱 -> 이 때 메시지 전송 객체는 메시지 전송자, 메시지 수신 객체는 메시지 수신자.
//		- 메시지는 오퍼레이션명과 인자로 구성되며 메시지 전송은 여기에 메시지 수신자를 추가한것.
//			- isSatisfiedBy(screening)은 메시지, condition.isSatisfiedBy(screening)은 메시지 전송.
//	- 메시지와 메서드
//		- 실제 실행 코드는 인터페이스를 실체화한 클래스의 종류에 따라 달라짐. -> 메시지를 수신했을 때 실제로 실행되는 함수 또는 프로시저를 메서드라고 함.
//		- 전통적인 방식과 다르게 객체는 메시지와 메서드를 런타임 시점에 연결해서 컴파일 시점과 런타임 시점의 의미가 달라질 수 있음.
//		- 메시지 전송은 코드 상에 표기하는 시점에는 어떤 코드가 실행될 지 알 수 없다. -> 런타임 시점에 달라지기에 그저 메시지에 응답할 수 있는 객체가 존재하고 적절한 메서드를 선택해서 응답할 것이라고 믿을 수 밖에 없음.
//		- 실행 시점에 메시지와 메서드를 바인딩하는 메커니즘은 두 객체 사이의 결합도를 낮춤으로써 유연하고 확장 가능한 코드를 작성할 수 있게 만든다.
//	- 퍼블릭 인터페이스와 오퍼레이션
//		- 객체가 의사소통을 위해 외부에 공개하는 메시지의 집합을 퍼블릭 인터페이스, 프로그래밍 언어의 관점에서 퍼블릭 인터페이스에 포함된 메시지를 오퍼레이션이라고 부른다.
//		- 오퍼레이션은 수행 가능한 어떤 행동에 대한 추상화다. -> 흔히 내부의 구현 코드는 제외하고 단순히 메시지와 관련된 시그니처를 가리키는 경우가 대부분. -> 앞에서 isSatisfiedBy(screeging)과 같음.
//		- 반면, 메시지를 수신했을 때 실제로 실행되는 코드는 메서드라고 부른다. -> 실 구현체의 isSatisfiedBy는 실제 구현을 포함하기에 메서드라고 부름. -> 이 메서드는 DiscountCondition 인터페이스에 정의된 isSatisfiedBy 오퍼레이션의 구현 중 하나다.
//		- 따라서 퍼블릭 인터페이스의 관점에서 보면 오퍼레이션 호출이라는 용어가 더 적절하다.
//	- 시그니처
//		- 오퍼레이션(또는 메서드)의 이름과 파라미터 목록을 합쳐 시그니처라고 부른다. -> 오퍼레이션은 실행 코드 없이 시그니처만을 정의, 메서드는 시그니처에 구현을 더한 것.
//		- 다형성의 축복을 받기 위해서는 하나의 오퍼레이션에 다양한 메서드를 구현해야 한다.

// 인터페이스와 설계 품질
//	- 좋은 인터페이스는 최소한의 인터페이스와 추상적인 인터페이스라는 조건을 만족해야함.
//		- 최소한의 인터페이스는 꼭 필요한 오퍼레이션만을 포함하고 추상적인 인터페이스는 어떻게 수행하는지가 아니라 무엇을 하는지를 표현.
//	- 이를 지키기 위해선 책임 주도 설계 방식을 따는 것이 가장 좋은 방법이다. -> 메시지를 먼저 선택하여 협력과는 무관한 인터페이스를 제외하고 메시지가 객체를 선택함으로써 클라이언트의 의도를 메시지에 표현.
//	- 퍼블릭 인터페이스의 품질에 영향을 미치는 원칙과 기법을 알아보자.
//		- 디미터 법칙
//			- 협력하는 객체의 내부 구조에 대한 결합으로 인해 발생하는 설계 문제를 해결하기 위해 제안된 원칙이 바로 디미터 법칙이다. -> 객체의 내부 구조에 강하게 결합되지 않도록 협력 경로를 제한하라.
//			- 디미터라는 프로젝트 진행 중 객체들의 협력 경로를 제한하면 결합도를 효과적으로 낮출 수 있다는 사실 발견. -> 특정 조건을 만족하는 대상에게만 메시지를 전송하도록 프로그래밍.
//			- 디미터 법칙을 따르면 부끄럽다 코드 (shy code)를 작성할 수 있따. -> 내부 구조가 전송자에게 노출되지 않으며 메시지 전송자는 수신자의 내부 구현에 결합되지 않는다.
//			- screeing.getMovie().getDiscountConditions() 이는 전형적으로 디미터 법칙을 위반한다.
//				-전송자가 수신자의 내부 구조에 대해 물어보고 반환받은 요소에 대해 연속적으로 메시지를 전송한다. -> 기차 충돌 (train wreck)이라고 부른다.
//				- 이는 캡슐화는 무너지고 전송자와 수신자 내부 구현이 강하게 결합된다. -> 내부 구조에 대해 묻는 것이 아니라 자신이 원하는 것이 무엇인지 명시하고 단순히 수행하도록 요청한다.
//			- 하지만 무비관적으로 디미터 법칙 수용 시 퍼블릭 인터페이스 관점에서 객체의 응집도가 낮아질 수도 있다.
//		- 묻지 말고 시켜라 (Tell, Don't Ask)
//			- 객체의 상태에 관해 묻지 말고 원하는 것을 시켜야 한다는 사실을 강조한다.
//			- 전송자는 수신자의 상태를 기반으로 결정을 내린 후 수신자의 상태를 바꿔서는 안된다. 이는 수신자가 담당해야 할 책임이다.
//			- 이 원칙을 따르면 상태와 행동을 함께 가지는 객체를 만들 수 있다. -> 해당 원칙에 따르도록 메시지를 결정하다 보면 자연스럽게 정보 전문가에게 책임을 할당하고 높은 응집도를 가진 클래스를 얻을 확률이 높아진다.
//			- 내부 상태를 묻거나 내부 상태에 따라 결정을 내리는 로직이 외부에 존재한다면 객체의 책임이 누수된 것이다.
//			- 상태를 묻는 오퍼레이션을 행동을 요청하는 오퍼레이션으로 대체해라.
//			- 하지만 단순히 묻지 않고 시킨다고 모든 문제가 해결되는 것은 아니다. -> 훌륭한 인터페이스를 얻기 위해서는 객체가 어떻게 작업을 수행하는지를 노출해서는 안된다. -> 인터페이스는 객체가 어떻게 하는지가 아닌 무엇을 하는지를 서술해야 한다.
// 		- 의도를 드러내는 인터페이스 (Intention Revealing Selector)
//			- 켄트 벡은 메서드 명명법 두 가지를 설명했다.
//				1. 메서드가 작업을 어떻게 수행하는지를 나타내도록 이름을 짓는 것 -> 이것은 좋지 않다. ex) isSatisfiedByPeriod(Screening screening)
//					- 이는 메서드에 대해 제대로 커뮤니케이션하지 못한다. -> 내부 구현을 정확하게 이해하지 못한다면 메서드가 수행하는 작업을 알아채기 어렵다.
//					- 더 큰 문제는 메서드 수준에서 캡슐화를 위반한다는 것이다. 메서드들을 클라이언트로 하여금 협력하는 객체의 종류를 알도록 강요한다.
//				2. 어떻게가 아닌 무엇을 하는지를 드러내는 것 -> 코드를 쉽게 이해하도록 만들고 유연한 코드를 낳는 지름길이다.
//					- 내부 구현이 아닌 책임에 대해서 고민해야 한다. -> 외부 객체가 메시지를 전송하는 목적을 먼저 생각하도록 만들며, 결과적으로 협력하는 클라이언트의 의도에 부합하도록 메서드의 이름을 짓게 된다.
//					- 메서드가 어떻게 수행하는냐가 아닌 무엇을 하는냐에 초점을 맞추면 클라이언트 관점에서 동일한 작업을 수행하는 메서드들을 하나의 타입 계층으로 묶을 수 있는 가능성이 커진다. -> 다양한 타입의 객체가 참여할 수 있는 유연한 협력.
//					- 객체에게 묻지 말고 시키되 구현 방법이 아닌 클라이언트의 의도를 드러내야 한다.
//      => 함께 모으기

// 원칙의 함정
//	- 디미터 원칙과 tell don't ask 법칙은 훌륭한 설계 원칙이지만 절대적인 법칙은 아니다.
//	- 원칙이 현재 상황에 부적합하다고 판단되면 과감하게 원칙을 무시해라.
// 	- 디미터 법칙은 하나의 도트를 강제하는 규칙이 아니다. -> 오직 하나의 도트만을 사용해라 -> 잘못됨.
//		- 디미터 법칙은 결합도와 관련되 것이고 결합도가 문제가 되는 것은 객체의 내부 구조가 외부로 노출되는 경우로 한정된다.
//	- 결합도와 응집도의 충돌
//		- 디비터 법칙을 따르는 것이 좋지만 자료 구조라면 당연히 내부를 노출해야 하므로 디미터 법칙을 적용하지 않아도 된다.
//		- 원칙을 맹신하지 말고 적절한 상황과 부적절한 상황을 판단할 수 있는 안목을 길러라
//		- 설계는 트레이드오프의 산물이다. -> 소프트웨어 설계에 존재하는 몇 안되는 법칙 중 하는 '경우에 따라 다르다'이다.

// 명령-쿼리 분리 원칙
//	- 가끔은 필요에 따라 물어야 한다는 사실에 납득했다면 명령-쿼리 분리 원칙을 알아두면 도움이 된다.
//	- 어떤 절차를 묶어 호출 가능하도록 이름을 부여한 기능 모듈을 루틴이라고 부른다.
//	- 루틴은 다시 프로시저와 함수로 구분할 수 있다. -> 프로시저는 정해진 절차에 따라 내부의 상태를 변경하는 루틴의 한 종류이다. 함수는 어떤 절차에 따라 필요한 값을 계산해서 반환하는 루틴으 ㅣ한 종류다.
//		- 프로시저는 부수효과를 발생시킬 수 있지만 값을 반환할 수 없다.
//		- 함수는 값을 반환할 수 있지만 부수효과를 발생시킬 수 없다.
//	- 명령, 쿼리는 객체의 인터페이스 측면에서 프로시저와 함수를 부르는 또 다른 이름이다.
//		- 객체의 상태를 수정하는 오퍼레이션을 명령이라고 부르고 객체와 관련된 정보를 반환하는 오퍼레이션을 쿼리라고 부른다.
//	- 수정 = 명령 = 프로시저, 반환 = 쿼리 = 함수
//	- 오퍼레이션은 부수효과를 발생시키는 명령이거나 부수효과를 발생시키지 않는 쿼리 중 하나여야 한다는 것이 이 원칙의 요지다.
// 	- 명령은 상태를 변경하지만 반환하면 안되고 쿼리는 반환은 있지만 상태를 변경하면 안된다.
//	- 명령과 쿼리를 분리해서 얻게 되는 장점은 무엇일까?

// 책임에 초점을 맞춰라
//	- 디미터 법칙을 준수하고 묻지 말고 시켜라 스타일을 따르면서도 의도를 드러내는 인터페이스를 설계하는 아주 쉬운 방법은 메시지를 먼저 선택하고 그 후에 메시지를 처리할 객체를 선택하는 것이다.
//	- 메시지를 먼저 선택하는 방법이 공부했던 원칙들에 대해 미치는 긍정적인 영향을 살펴보자.
//		- 디미터 법칙 : 수신할 객체를 알지 못한 상태에서 메시지를 선택해 객체 내부 구조를 고민 X -> 의도적으로 디미터 법칙을 위반할 위험을 최소화.
//		- 묻지 말고 시켜라 : 메시지 먼저 선택 시 해당 스타일에 따라 협력 구조화 -> 필요한 정보를 묻지 않고 원하는 것을 표현한 메시지를 전송할 수 있음.
//		- 의도를 드러내는 인터페이스 : 메시지를 먼저 선택하면 클라이언트 관점에서 무엇을 원하는지 의도가 드러나게 만들 수 있음.
//		- 명령-쿼리 분리 원칙 : 메시지를 먼저 선택 -> 협력 내의 객체의 인터페이스에 관해 고민 -> 단순히 어떤 일 X 객체 상태를 예측하고 이해하기 쉽게 만드는 방법 고민 -> 명령과 쿼리를 분리하게 됨.
//	- 훌륭한 메시지를 얻기 위한 출발점은 책임 주도 설계 원칙을 따르는 것. -> 메시지가 객체를 결정해게 해라.